/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminConfigService } from "../adminConfig.service";
import { AdminConfigCreateInput } from "./AdminConfigCreateInput";
import { AdminConfig } from "./AdminConfig";
import { AdminConfigFindManyArgs } from "./AdminConfigFindManyArgs";
import { AdminConfigWhereUniqueInput } from "./AdminConfigWhereUniqueInput";
import { AdminConfigUpdateInput } from "./AdminConfigUpdateInput";

export class AdminConfigControllerBase {
  constructor(protected readonly service: AdminConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminConfig })
  async createAdminConfig(
    @common.Body() data: AdminConfigCreateInput
  ): Promise<AdminConfig> {
    return await this.service.createAdminConfig({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminConfig] })
  @ApiNestedQuery(AdminConfigFindManyArgs)
  async adminConfigs(@common.Req() request: Request): Promise<AdminConfig[]> {
    const args = plainToClass(AdminConfigFindManyArgs, request.query);
    return this.service.adminConfigs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminConfig(
    @common.Param() params: AdminConfigWhereUniqueInput
  ): Promise<AdminConfig | null> {
    const result = await this.service.adminConfig({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminConfig(
    @common.Param() params: AdminConfigWhereUniqueInput,
    @common.Body() data: AdminConfigUpdateInput
  ): Promise<AdminConfig | null> {
    try {
      return await this.service.updateAdminConfig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminConfig(
    @common.Param() params: AdminConfigWhereUniqueInput
  ): Promise<AdminConfig | null> {
    try {
      return await this.service.deleteAdminConfig({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
