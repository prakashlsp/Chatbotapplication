/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdminConfig as PrismaAdminConfig } from "@prisma/client";

export class AdminConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminConfig.count(args);
  }

  async adminConfigs<T extends Prisma.AdminConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminConfigFindManyArgs>
  ): Promise<PrismaAdminConfig[]> {
    return this.prisma.adminConfig.findMany<Prisma.AdminConfigFindManyArgs>(
      args
    );
  }
  async adminConfig<T extends Prisma.AdminConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminConfigFindUniqueArgs>
  ): Promise<PrismaAdminConfig | null> {
    return this.prisma.adminConfig.findUnique(args);
  }
  async createAdminConfig<T extends Prisma.AdminConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminConfigCreateArgs>
  ): Promise<PrismaAdminConfig> {
    return this.prisma.adminConfig.create<T>(args);
  }
  async updateAdminConfig<T extends Prisma.AdminConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminConfigUpdateArgs>
  ): Promise<PrismaAdminConfig> {
    return this.prisma.adminConfig.update<T>(args);
  }
  async deleteAdminConfig<T extends Prisma.AdminConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminConfigDeleteArgs>
  ): Promise<PrismaAdminConfig> {
    return this.prisma.adminConfig.delete(args);
  }
}
